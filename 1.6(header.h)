#pragma once
#include <iostream>
#include <ctime>
#include <cstring>

using namespace std;

template <class T>
T sort_direct_merge(T *a, int fsize)
{
    if (fsize < 2) return *a;
    sort_direct_merge(a, fsize / 2);
    sort_direct_merge(&a[fsize / 2], fsize - (fsize / 2));
    T* buf = new T[fsize];
    int idbuf = 0, idl = 0, idr = fsize / 2 ;
    while ((idl < fsize / 2) && (idr < fsize))
        if (a[idl] < a[idr])
            buf[idbuf++] = a[idl++];
        else
            buf[idbuf++] = a[idr++];
    while (idl < fsize / 2) buf[idbuf++] = a[idl++];
    while (idr < fsize) buf[idbuf++] = a[idr++];
    for (idl = 0; idl < fsize; idl++)a[idl] = buf[idl];
    delete[]buf;
    return *a;
}

template <class T>
T output_arr(T *arr, int N)
{
  cout << endl << "Отсортированный массив: ";

  for (size_t i = 0; i < N; i++)
    cout << arr[i] << " ";

  cout << endl;

  return *arr;
}

template <class T>
T input_arr(T *arr, int N, int way)
{
  srand(time(NULL));
  if (way == 1)
  {
    cout << "Сгенерированный массив: ";
    for (size_t i = 0; i < N; i++)
    {
      arr[i] = rand()%100;
      cout << arr[i] << " ";
    }
    sort_direct_merge(arr, N);
  }
  if (way == 2)
  {
    cout << "Сгенерированный массив: ";
    for (size_t i = 0; i < N; i++)
    {
      arr[i] = rand()/63811248.1241512;
      cout << arr[i] << " ";
    }
    sort_direct_merge(arr, N);
  }
  if (way == 3)
      sort_direct_merge(arr, N);
  output_arr(arr, N);
  return 0;
}
